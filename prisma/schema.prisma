// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                String    @id @default(cuid()) 
  email             String    @unique
  password          String?   // Optional for social login
  name              String?
  bio               String?   // 自己紹介文
  role              String    @default("user")
  image             String?
  emailVerified     DateTime?
  verificationToken String?   // メール認証用トークン
  tokenExpiry       DateTime? // トークンの有効期限
  accounts          Account[]
  sessions          Session[]
  posts             Post[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("users")
}

// Account model for OAuth providers
model Account {
  id                String  @id @default(cuid()) 
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Session model
model Session {
  id           String   @id @default(cuid()) 
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Post model
model Post {
  id        String   @id @default(cuid()) 
  title     String
  content   String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

